AWSTemplateFormatVersion: '2010-09-09'
Description: 'Serverless E-Commerce Order Processing System with UI and WAF'

Parameters:
  ProjectName:
    Type: String
    Default: ecommerce-order-system
    Description: Name for the project resources

Resources:
  
# DynamoDB Table to store orders
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-orders'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      Tags:
        - Key: Project
          Value: !Ref ProjectName

# IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt OrdersTable.Arn

# Lambda function to process orders
  ProcessOrderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-process-order'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime
          import uuid
          from decimal import Decimal

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])

          def lambda_handler(event, context):
              # CORS headers
              cors_headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                  'Access-Control-Allow-Methods': 'POST,OPTIONS'
              }
              
              # Handle OPTIONS request (preflight)
              if event.get('httpMethod') == 'OPTIONS' or event.get('requestContext', {}).get('http', {}).get('method') == 'OPTIONS':
                  return {
                      'statusCode': 200,
                      'headers': cors_headers,
                      'body': json.dumps({'message': 'OK'})
                  }
              
              try:
                  # Parse the incoming order
                  print(f"Event: {json.dumps(event)}")
                  
                  # Handle both API Gateway and Lambda Function URL formats
                  if 'body' in event:
                      if isinstance(event['body'], str):
                          body = json.loads(event['body'])
                      else:
                          body = event['body']
                  else:
                      body = event
                  
                  print(f"Parsed body: {json.dumps(body)}")
                  
                  # Convert float values to Decimal for DynamoDB
                  def convert_floats(obj):
                      if isinstance(obj, list):
                          return [convert_floats(item) for item in obj]
                      elif isinstance(obj, dict):
                          return {key: convert_floats(value) for key, value in obj.items()}
                      elif isinstance(obj, float):
                          return Decimal(str(obj))
                      else:
                          return obj
                  
                  # Convert items and totalAmount to Decimal
                  items_converted = convert_floats(body.get('items', []))
                  total_converted = Decimal(str(body.get('totalAmount', 0)))
                  
                  # Create order record
                  order = {
                      'orderId': str(uuid.uuid4()),
                      'timestamp': int(datetime.now().timestamp()),
                      'customerName': body.get('customerName'),
                      'items': items_converted,
                      'totalAmount': total_converted,
                      'status': 'pending'
                  }
                  
                  print(f"Order to save: {order}")
                  
                  # Save to DynamoDB
                  table.put_item(Item=order)
                  
                  print(f"Order saved successfully: {order['orderId']}")
                  
                  return {
                      'statusCode': 200,
                      'headers': cors_headers,
                      'body': json.dumps({
                          'message': 'Order placed successfully',
                          'orderId': order['orderId']
                      })
                  }
              except Exception as e:
                  print(f"Error: {str(e)}")
                  import traceback
                  traceback.print_exc()
                  
                  return {
                      'statusCode': 500,
                      'headers': cors_headers,
                      'body': json.dumps({
                          'error': str(e),
                          'message': 'Failed to process order'
                      })
                  }

  
# REST API Gateway
  OrderAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-api'
      Description: API for processing orders
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource (/orders path)
  OrdersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref OrderAPI
      ParentId: !GetAtt OrderAPI.RootResourceId
      PathPart: orders

  # POST method for /orders
  OrdersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref OrderAPI
      ResourceId: !Ref OrdersResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessOrderFunction.Arn}/invocations'

  # OPTIONS method for CORS
  OrdersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref OrderAPI
      ResourceId: !Ref OrdersResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - OrdersPostMethod
      - OrdersOptionsMethod
    Properties:
      RestApiId: !Ref OrderAPI
      StageName: prod

  # Lambda permission for API Gateway
  LambdaAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessOrderFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OrderAPI}/*/*'

  # Custom Domain Name for API Gateway
  APICustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: api.architecture-demo.com
      RegionalCertificateArn: arn:aws:acm:us-east-1:914261932225:certificate/4aed2e2e-b84b-4de8-acfb-17cf15843aaa
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  # Map Custom Domain to API Gateway
  APIBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: APIDeployment
    Properties:
      DomainName: !Ref APICustomDomain
      RestApiId: !Ref OrderAPI
      Stage: prod

  # Route 53 Record for API subdomain
  APIRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z01144622GJU2X257MHX7
      Name: api.architecture-demo.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt APICustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt APICustomDomain.RegionalHostedZoneId
        EvaluateTargetHealth: false

# S3 Bucket for hosting the website
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-website-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # CloudFront Origin Access Identity
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${ProjectName}'

  # S3 Bucket Policy
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontOAI
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'

# CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'CloudFront distribution for ${ProjectName}'
        DefaultRootObject: index.html
        WebACLId: !GetAtt WebACL.Arn
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html 

# WAF Web ACL for CloudFront
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${ProjectName}-waf'
      Scope: CLOUDFRONT
      Description: WAF to protect CloudFront
      DefaultAction:
        Allow: {}
      Rules:
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesCommonRuleSetMetric
        
        - Name: AWSManagedRulesKnownBadInputsRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesKnownBadInputsRuleSetMetric
        
        - Name: AWSManagedRulesSQLiRuleSet
          Priority: 3
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesSQLiRuleSetMetric
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${ProjectName}-waf-metric'
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # WAF for API Gateway
  APIGatewayWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${ProjectName}-api-waf'
      Scope: REGIONAL
      Description: WAF to protect API Gateway
      DefaultAction:
        Allow: {}
      Rules:
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: APIAWSManagedRulesCommonRuleSetMetric
        
        - Name: AWSManagedRulesSQLiRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: APIAWSManagedRulesSQLiRuleSetMetric
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${ProjectName}-api-waf-metric'

  # Associate WAF with API Gateway Stage
  APIGatewayWAFAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    DependsOn: APIDeployment
    Properties:
      ResourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${OrderAPI}/stages/prod'
      WebACLArn: !GetAtt APIGatewayWebACL.Arn

Outputs:
  WebsiteURL:
    Description: CloudFront URL for the website
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${ProjectName}-website-url'

  APIEndpoint:
    Description: API Gateway endpoint URL (auto-generated)
    Value: !Sub 'https://${OrderAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/orders'
    Export:
      Name: !Sub '${ProjectName}-api-endpoint'

  CustomAPIEndpoint:
    Description: Custom domain API endpoint URL
    Value: https://api.architecture-demo.com/orders
    Export:
      Name: !Sub '${ProjectName}-custom-api-endpoint'

  S3BucketName:
    Description: S3 Bucket name for uploading website files
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${ProjectName}-bucket-name'

  DynamoDBTableName:
    Description: DynamoDB table name for orders
    Value: !Ref OrdersTable
    Export:
      Name: !Sub '${ProjectName}-table-name'